/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Model.Product;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import Model.User;

import Controller.AuthorizationManager;
import Controller.UserContext; 
import Controller.InputValidator;
/**
 *
 * @author beepxD
 */
public class MgmtProduct extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    
    public MgmtProduct(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

//        UNCOMMENT TO DISABLE BUTTONS
//        purchaseBtn.setVisible(false);
//        addBtn.setVisible(false);
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
    }

    public void init(){
        // Clear table
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
        // Load contents
        ArrayList<Product> products = sqlite.getProduct();
        for(int nCtr = 0; nCtr < products.size(); nCtr++){
            tableModel.addRow(new Object[]{
                products.get(nCtr).getName(), 
                products.get(nCtr).getStock(), 
                products.get(nCtr).getPrice()});
        }
        
        // Apply authorization controls
        applyAuthorization();
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    public void applyAuthorization() {
        User currentUser = UserContext.getInstance().getCurrentUser();
        if (currentUser == null) {
            return;
        }
        
        int userRole = currentUser.getRole();
        
        // Everyone can purchase products
        purchaseBtn.setVisible(true);
        
        // Only managers and above can add products
        addBtn.setVisible(userRole >= AuthorizationManager.ROLE_MANAGER);
        
        // Only managers and above can edit products
        editBtn.setVisible(userRole >= AuthorizationManager.ROLE_MANAGER);
        
        // Only managers and above can delete products
        deleteBtn.setVisible(userRole >= AuthorizationManager.ROLE_MANAGER);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        purchaseBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(1).setMaxWidth(100);
            table.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        purchaseBtn.setBackground(new java.awt.Color(255, 255, 255));
        purchaseBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        purchaseBtn.setText("PURCHASE");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(255, 255, 255));
        addBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(255, 255, 255));
        editBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchaseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        if (!UserContext.getInstance().isAuthorized("PURCHASE_PRODUCTS")) {
            JOptionPane.showMessageDialog(this, "You are not authorized to purchase products.", 
                "Authorization Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(table.getSelectedRow() >= 0){
            String productName = (String) tableModel.getValueAt(table.getSelectedRow(), 0);
            int currentStock = (int) tableModel.getValueAt(table.getSelectedRow(), 1);
            
            if (currentStock <= 0) {
                JOptionPane.showMessageDialog(this, "This product is out of stock.", 
                    "Purchase Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            JTextField stockFld = new JTextField("1");
            designer(stockFld, "PRODUCT QUANTITY");

            Object[] message = {
                "How many " + productName + " do you want to purchase?", stockFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "PURCHASE PRODUCT", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                String quantityStr = stockFld.getText();
                
                // Validate quantity
                if (!InputValidator.isValidNumeric(quantityStr)) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", 
                        "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                int quantity = Integer.parseInt(quantityStr);
                
                if (quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity must be greater than zero.", 
                        "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (quantity > currentStock) {
                    JOptionPane.showMessageDialog(this, "Not enough stock available. Current stock: " + currentStock, 
                        "Purchase Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                User currentUser = UserContext.getInstance().getCurrentUser();
                if (currentUser != null) {
                    if (sqlite.purchaseProduct(currentUser.getUsername(), productName, quantity)) {
                        JOptionPane.showMessageDialog(this, "Purchase successful!", 
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                        init(); // Refresh table
                    } else {
                        JOptionPane.showMessageDialog(this, "Purchase failed. Please try again.", 
                            "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        if (!UserContext.getInstance().isAuthorized("ADD_PRODUCTS")) {
            JOptionPane.showMessageDialog(this, "You are not authorized to add products.", 
                "Authorization Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        JTextField nameFld = new JTextField();
        JTextField stockFld = new JTextField("0");
        JTextField priceFld = new JTextField("0.00");

        designer(nameFld, "PRODUCT NAME");
        designer(stockFld, "PRODUCT STOCK");
        designer(priceFld, "PRODUCT PRICE");

        Object[] message = {
            "Insert New Product Details:", nameFld, stockFld, priceFld
        };

        int result = JOptionPane.showConfirmDialog(null, message, "ADD PRODUCT", 
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

        if (result == JOptionPane.OK_OPTION) {
            String name = nameFld.getText();
            String stockStr = stockFld.getText();
            String priceStr = priceFld.getText();
            
            // Validate inputs
            if (!InputValidator.isValidProductName(name)) {
                JOptionPane.showMessageDialog(this, "Please enter a valid product name (2-50 characters).", 
                    "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (!InputValidator.isValidNumeric(stockStr)) {
                JOptionPane.showMessageDialog(this, "Please enter a valid stock quantity.", 
                    "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (!InputValidator.isValidPrice(priceStr)) {
                JOptionPane.showMessageDialog(this, "Please enter a valid price.", 
                    "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            int stock = Integer.parseInt(stockStr);
            double price = Double.parseDouble(priceStr);
            
            if (sqlite.addProduct(name, stock, price)) {
                JOptionPane.showMessageDialog(this, "Product added successfully!", 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
                init(); // Refresh table
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add product. It may already exist.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        if (!UserContext.getInstance().isAuthorized("EDIT_PRODUCTS")) {
            JOptionPane.showMessageDialog(this, "You are not authorized to edit products.", 
                "Authorization Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(table.getSelectedRow() >= 0){
            String name = (String) tableModel.getValueAt(table.getSelectedRow(), 0);
            String currentStock = tableModel.getValueAt(table.getSelectedRow(), 1).toString();
            String currentPrice = tableModel.getValueAt(table.getSelectedRow(), 2).toString();
            
            JTextField nameFld = new JTextField(name);
            JTextField stockFld = new JTextField(currentStock);
            JTextField priceFld = new JTextField(currentPrice);

            designer(nameFld, "PRODUCT NAME");
            designer(stockFld, "PRODUCT STOCK");
            designer(priceFld, "PRODUCT PRICE");
            
            // Make name field non-editable (primary key)
            nameFld.setEditable(false);

            Object[] message = {
                "Edit Product Details:", nameFld, stockFld, priceFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "EDIT PRODUCT", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                String stockStr = stockFld.getText();
                String priceStr = priceFld.getText();
                
                // Validate inputs
                if (!InputValidator.isValidNumeric(stockStr)) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid stock quantity.", 
                        "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (!InputValidator.isValidPrice(priceStr)) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid price.", 
                        "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                int stock = Integer.parseInt(stockStr);
                double price = Double.parseDouble(priceStr);
                
                if (sqlite.updateProduct(name, stock, price)) {
                    JOptionPane.showMessageDialog(this, "Product updated successfully!", 
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                    init(); // Refresh table
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update product.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if (!UserContext.getInstance().isAuthorized("EDIT_PRODUCTS")) {
            JOptionPane.showMessageDialog(this, "You are not authorized to delete products.", 
                "Authorization Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(table.getSelectedRow() >= 0){
            String name = (String) tableModel.getValueAt(table.getSelectedRow(), 0);
            
            int result = JOptionPane.showConfirmDialog(null, 
                "Are you sure you want to delete " + name + "?", 
                "DELETE PRODUCT", JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                if (sqlite.deleteProduct(name)) {
                    JOptionPane.showMessageDialog(this, "Product deleted successfully!", 
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                    init(); // Refresh table
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete product.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
